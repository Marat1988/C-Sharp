<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z.Expressions.Eval</name>
    </assembly>
    <members>
        <member name="T:Z.Expressions.EvalCompilerParameterKind">
            <summary>Values that represent the ParameterKind for the EvalCompiler.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.None">
            <summary>An enum constant representing the option when no parameter is specified.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.Dictionary">
            <summary>An enum constant representing the option when a dictionary parameter is specified.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.Enumerable">
            <summary>An enum constant representing the option when an enumerable parable is specified.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.SingleDictionary">
            <summary>An enum constant representing the option when a single dictionary parameter is specified.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.Typed">
            <summary>An enum constant representing the option when parameter are typed.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.Untyped">
            <summary>An enum constant representing the option when parameter are untyped.</summary>
        </member>
        <member name="F:Z.Expressions.EvalCompilerParameterKind.Linq">
            <summary>An enum constant representing the option when parameter are coming from linq.</summary>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type[])">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <param name="type9">The ninth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile``1(System.String)">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile``1(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Compile``1(System.String,System.String[])">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Clone">
            <summary>Makes a shallow copy of current EvalContext.</summary>
            <returns>A shallow copy of the current EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterDefaultAliasSafe">
            <summary>Registers default alias (Extension Methods, Names, Static Members, Types and Values).</summary>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterDefaultAliasUnsafe">
            <summary>Registers default alias (Extension Methods, Names, Static Members, Types and Values).</summary>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute(System.String)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute``1(System.String)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute``1(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Execute``1(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredKeyword(System.String)">
            <summary>Check if the keyword is already registered.</summary>
            <param name="keyword">The keyword.</param>
            <returns>True if the keyword is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredAutoAddMissingTypeAssembly(System.Reflection.Assembly)">
            <summary>Check if the assembly is already registered for the option `AutoAddMissingType`.</summary>
            <param name="assembly">The assembly.</param>
            <returns>True if all types from the assembly us registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredAlias(System.String)">
            <summary>Check if the alias is already registered.</summary>
            <param name="alias">The alias.</param>
            <returns>True if the alias is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredAlias(System.String,System.String)">
            <summary>Check if the alias is already registered with the specified name.</summary>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns>True if the alias is already registered with the specified name, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredAssembly(System.Reflection.Assembly)">
            <summary>Check if all types from the assembly is already registered.</summary>
            <param name="assembly">The assembly.</param>
            <returns>True if all types from the assembly us registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredExtensionMethod(System.Type)">
            <summary>Check if all extension methods from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all extension methods from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredExtensionMethod(System.Reflection.MethodInfo)">
            <summary>Check if the extension method is already registered.</summary>
            <param name="extensionMethod">The extension method.</param>
            <returns>True if extension method is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredGlobalConstant(System.String)">
            <summary>Check if the global constant is already registered.</summary>
            <param name="name">The global constant name.</param>
            <returns>True if the global constant is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredGlobalConstant(System.String,System.Object)">
            <summary>Check if the global constant is already registered with the specified value.</summary>
            <param name="name">The global constant name.</param>
            <param name="value">The global constant value.</param>
            <returns>True if the global constant is already registered with the specified value, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredGlobalVariable(System.String)">
            <summary>Check if the global variable is already registered.</summary>
            <param name="name">The global variable name.</param>
            <returns>True if the global variable is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredGlobalVariable(System.String,System.Object)">
            <summary>Check if the global variable is already registered with the specified value.</summary>
            <param name="name">The global variable name.</param>
            <param name="value">The global variable value.</param>
            <returns>True if the global variable is already registered with the specified value, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredLocalVariable(System.String)">
            <summary>Check if the local variable is already registered.</summary>
            <param name="name">The local variable name.</param>
            <returns>True if the local variable is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredLocalVariable(System.String,System.Object)">
            <summary>Check if the local variable is already registered with the specified value.</summary>
            <param name="name">The local variable name.</param>
            <param name="value">The local variable value.</param>
            <returns>True if the local variable is already registered with the specified value, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredMember(System.Type)">
            <summary>Check if all members from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all members from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisterMember(System.Reflection.MemberInfo)">
            <summary>Check if the member is already registered.</summary>
            <param name="member">The member.</param>
            <returns>True if the member is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredNamespace(System.Reflection.Assembly,System.String)">
            <summary>Check if all type from the assembly namespace is already registered.</summary>
            <param name="assembly">The assembly.</param>
            <param name="name">The namespace.</param>
            <returns>True if all type from the assembly namespace is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticField(System.Type)">
            <summary>Check if all static fields from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all static fields from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticField(System.Reflection.FieldInfo)">
            <summary>Check if the static field is already registered.</summary>
            <param name="field">The static field.</param>
            <returns>True if the static field is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticMember(System.Type)">
            <summary>Check if all static members from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all static members from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticMember(System.Reflection.MemberInfo)">
            <summary>Check if the static member is already registered.</summary>
            <param name="member">The static member.</param>
            <returns>True if the static member is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticMethod(System.Type)">
            <summary>Check if all static methods from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all static methods from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticMethod(System.Reflection.MethodInfo)">
            <summary>Check if the static method is already registered.</summary>
            <param name="method">The static method.</param>
            <returns>True if the static method is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticProperty(System.Type)">
            <summary>Check if all static properties from the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if all static properties from the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredStaticProperty(System.Reflection.PropertyInfo)">
            <summary>Check if the static property is already registered.</summary>
            <param name="property">The static property.</param>
            <returns>True if the static property is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredType(System.String)">
            <summary>Check if the type name is already registered.</summary>
            <param name="name">The type name.</param>
            <returns>True if the type name is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.IsRegisteredType(System.Type)">
            <summary>Check if the type is already registered.</summary>
            <param name="type">The type.</param>
            <returns>True if the type is already registered, false if not.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterKeyword(System.String,System.String)">
            <summary>Registers a keyword.</summary>
            <param name="keyword">The keyword.</param>
            <param name="extensionMethodName">Name of the extension method to call when the keyword is used.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterAutoAddMissingTypeAssembly(System.Reflection.Assembly[])">
            <summary>
            Registers assembly used for the option `AutoAddMissingType`
            </summary>
            <param name="assemblies">A variable-length parameters list containing assemblies.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticMethod(System.Type[])">
            <summary>Registers the static method described by types.</summary>
            <param name="types">A variable-length parameters list containing types.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticMethod(System.Reflection.MethodInfo[])">
            <summary>Registers the static method described by types.</summary>
            <param name="methods">A variable-length parameters list containing method to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticProperty(System.Type[])">
            <summary>Registers the static property described by types.</summary>
            <param name="types">A variable-length parameters list containing types.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticProperty(System.Reflection.PropertyInfo[])">
            <summary>Registers the static property described by types.</summary>
            <param name="properties">A variable-length parameters list containing property to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticField(System.Type[])">
            <summary>Registers the static field described by types.</summary>
            <param name="types">A variable-length parameters list containing types.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticField(System.Reflection.FieldInfo[])">
            <summary>Registers the static field described by types.</summary>
            <param name="fields">A variable-length parameters list containing field to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterNamespace(System.Reflection.Assembly,System.String)">
            <summary>Registers all types in a namespace for a specific assembly.</summary>
            <param name="assembly">The assembly with the namespace to register.</param>
            <param name="name">The namespace name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterLocalVariable(System.String,System.Object)">
            <summary>Registers a local variable.</summary>
            <exception cref="T:System.Exception">Thrown an exception if the local variable name already exists.</exception>
            <param name="name">The local variable name.</param>
            <param name="value">The local variable value.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterAlias(System.String,System.String)">
            <summary>Registers an alias for a variable, constant, static method or type name.</summary>
            <exception cref="T:System.Exception">Thrown an exception if the alias already exists.</exception>
            <param name="alias">The alias to register.</param>
            <param name="name">The variable, constant, static method or type name to register for the specified alias.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterAssembly(System.Reflection.Assembly[])">
            <summary>Registers all types from all specified assemblies.</summary>
            <param name="assemblies">A variable-length parameters list containing assemblies to register type from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterDomainAssemblies">
            <summary>Registers all types from all domain assemblies.</summary>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterExtensionMethod(System.Type[])">
            <summary>Registers all extension methods from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to register extension methods from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterExtensionMethod(System.Reflection.MethodInfo[])">
            <summary>Registers all specified extension methods.</summary>
            <param name="extensionMethods">A variable-length parameters list containing extension methods to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterGlobalConstant(System.String,System.Object)">
            <summary>Registers a global constant.</summary>
            <exception cref="T:System.Exception">Thrown an exception if the global constant name already exists.</exception>
            <param name="name">The global constant name.</param>
            <param name="value">The global constant value.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterGlobalVariable(System.String,System.Object,System.Boolean)">
            <summary>Registers a global variable.</summary>
            <exception cref="T:System.Exception">Thrown an exception if the global variable name already exists.</exception>
            <param name="name">The global variable name.</param>
            <param name="value">The global variable value.</param>
            <param name="includeMembers">(Optional) True to include, false to exclude the members.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterGlobalVariable(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Registers a global variable.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="dictionary">The dictionary to register with all his key as members.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterMember(System.Reflection.MemberInfo[])">
            <summary>Registers specified static members.</summary>
            <param name="members">A variable-length parameters list containing members to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticMember(System.Type[])">
            <summary>Registers static member from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to register static members from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterStaticMember(System.Reflection.MemberInfo[])">
            <summary>Registers the static member described by members.</summary>
            <param name="members">A variable-length parameters list containing members.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.RegisterType(System.Type[])">
            <summary>Registers specified types using Type.Name and Type.FullName as alias.</summary>
            <param name="types">A variable-length parameters list containing types to register.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.Tokenize(System.String)">
            <summary>Tokenize the code</summary>
            <param name="code">The code to tokenize.</param>
            <returns>A List&lt;TokenInfo&gt;</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterKeyword(System.String)">
            <summary>Unregisters a keyword.</summary>
            <param name="keyword">The keyword name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterAutoAddMissingTypeAssembly(System.Reflection.Assembly[])">
            <summary>
            Unregisters assembly used for the option `AutoAddMissingType`
            </summary>
            <param name="assemblies">A variable-length parameters list containing assemblies.</param>
            <returns>An EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticMethod(System.Type[])">
            <summary>Unregisters static method from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister static method from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticMethod(System.Reflection.MemberInfo[])">
            <summary>Unregisters static method from specified types.</summary>
            <param name="methods">A variable-length parameters list containing method.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticMethod(System.String[])">
            <summary>Unregisters static method from specified types.</summary>
            <param name="extensionMethods">A variable-length parameters list containing method names.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticProperty(System.Type[])">
            <summary>Unregisters static property from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister static property from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticProperty(System.Reflection.MemberInfo[])">
            <summary>Unregisters static property from specified types.</summary>
            <param name="properties">A variable-length parameters list containing property.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticField(System.Type[])">
            <summary>Unregisters static field from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister static field from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticField(System.Reflection.MemberInfo[])">
            <summary>Unregisters static field from specified types.</summary>
            <param name="fields">A variable-length parameters list containing field.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterNamespace(System.Reflection.Assembly,System.String)">
            <summary>Unregisters all types in a namespace for a specific assembly.</summary>
            <param name="assembly">The assembly with the namespace to unregister.</param>
            <param name="name">The namespace name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterLocalVariable(System.String[])">
            <summary>Unregisters a local variable.</summary>
            <param name="aliases">The local variable name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterAlias(System.String[])">
            <summary>Unregisters all alias for a variable, constant or type name.</summary>
            <param name="aliases">A variable-length parameters list containing alias to unregister.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterAll">
            <summary>Unregisters all kind of alias (Extension Methods, Names, Static Members, Types and Values).</summary>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterAssembly(System.Reflection.Assembly[])">
            <summary>Unregisters all types from all specified assemblies.</summary>
            <param name="assemblies">A variable-length parameters list containing assemblies to unregister type from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterExtensionMethod(System.Type[])">
            <summary>Unregisters all extension methods from the specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister extension methods from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterExtensionMethod(System.Reflection.MethodInfo[])">
            <summary>Unregisters all specified extension methods.</summary>
            <param name="extensionMethods">A variable-length parameters list containing extension methods to unregister.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterExtensionMethod(System.String[])">
            <summary>Unregisters all specified extension methods.</summary>
            <param name="extensionMethods">A variable-length parameters list containing extension methods name to unregister.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterGlobalConstant(System.String[])">
            <summary>Unregisters a global constant.</summary>
            <param name="aliases">The global constant name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterGlobalVariable(System.String[])">
            <summary>Unregisters a global variable.</summary>
            <param name="aliases">The global variable name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterGlobalVariable(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Unregisters a global variable.</summary>
            <param name="dictionary">The global variable name.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterMember(System.Type[])">
            <summary>Unregisters member from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister static members from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterMember(System.Reflection.MemberInfo[])">
            <summary>Unregisters member from specified types.</summary>
            <param name="members">A variable-length parameters list containing members.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticMember(System.Type[])">
            <summary>Unregisters static member from specified types.</summary>
            <param name="types">A variable-length parameters list containing types to unregister static members from.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterStaticMember(System.Reflection.MemberInfo[])">
            <summary>Unregisters static member from specified types.</summary>
            <param name="members">A variable-length parameters list containing members.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="M:Z.Expressions.EvalContext.UnregisterType(System.Type[])">
            <summary>Unregisters specified types using Type.Name and Type.FullName as alias.</summary>
            <param name="types">A variable-length parameters list containing types to unregister.</param>
            <returns>An Fluent EvalContext.</returns>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseLocalCache">
            <summary>
            Gets or sets a value indicating whether a local dictionary for this EvalContext should be
            used instead of a global cache (might lower performance).
            </summary>
            <value>
            True if a local dictionary for this EvalContext should be used instead of a global cache
            (might lower performance).
            </value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasExtensionMethods">
            <summary>Gets or sets the alias list for extension methods.</summary>
            <value>The alias list for extension methods.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.IncludeMemberFromAllParameters">
            <summary>
            Gets or sets a value indicating whether the member from all parameters should be included.
            </summary>
            <value>True if include member from all parameters, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseSmartExecuteParameterResolution">
            <summary>
            Gets or sets a value indicating whether this object use smart execute parameter
            resolution.
            </summary>
            <value>True if use smart execute parameter resolution, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseShortCacheKey">
            <summary>
            Gets or sets if a short cache key should be used with caching.
            The key is shorter (For example, it only contains dictionary keys used in the expression)
            and might reduce the memory usage in some scenarios as there is more chance to re-use the same compiled expression.
            However, it makes the key less unique.
            </summary>
            <value>True if a short cache key should be used with caching.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DynamicMemberNames">
            <summary>Gets or sets a list of names of the dynamic members.</summary>
            <value>A list of names of the dynamic members.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasGlobalConstants">
            <summary>Gets or sets the alias list for global constants.</summary>
            <value>The alias list for global constants.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasGlobalVariables">
            <summary>Gets or sets the alias list for global variables.</summary>
            <value>The alias list for global variables.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasKeywords">
            <summary>Gets or sets the keywords.</summary>
            <value>The keywords.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasDictionaryGlobalVariables">
            <summary>Gets or sets the alias dictionary global variables.</summary>
            <value>The alias dictionary global variables.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasLocalVariables">
            <summary>Gets or sets the alias list for local variables.</summary>
            <value>The alias list for local variables.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasGlobalExpressionVariables">
            <summary>Gets or sets the alias list for global expression variables.</summary>
            <value>The alias list for global expression variables.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasGlobalMethodVariables">
            <summary>Gets or sets the alias list for global expression methods.</summary>
            <value>The alias list for global expression methods.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasNames">
            <summary>Gets or sets the alias list for names.</summary>
            <value>The alias list for names.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasStaticMembers">
            <summary>Gets or sets the alias list for static members.</summary>
            <value>The alias list for static members.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasMembers">
            <summary>Gets or sets the alias list for static members.</summary>
            <value>The alias list for static members.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.InternalAddMethods">
            <summary>DO NOT USE.</summary>
        </member>
        <member name="P:Z.Expressions.EvalContext.AliasTypes">
            <summary>Gets or sets the alias list for types.</summary>
            <value>A alias list for types.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AutoAddMissingTypeAssemblies">
            <summary>Gets or sets a list of assemblies for the option `AutoAddMissingType`.</summary>
            <value>The list of assemblies for the option `AutoAddMissingType`.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UsedTypes">
            <summary>Gets or sets a list of types used in the compilation.</summary>
            <value>A list of types used in the compilation.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.MissingTypes">
            <summary>Gets or sets a list of types missing in the first try, but found on the second try with all types from the domain assemblies. The option 'RetryAndFindMissingTypes' must be turned on.</summary>
            <value>A list of types missing in the first try, but found on the second try with all types from the domain assemblies. The option 'RetryAndFindMissingTypes' must be turned on.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.BindingFlags">
            <summary>Gets or sets the binding flags used to resolve members in the compiler.</summary>
            <value>The binding flags used to resolve members in the compiler.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.MaxLoopIteration">
            <summary>Gets or sets the maximum iteration allowed for loop (do, while, for, foreach).</summary>
            <value>The maximum iteration allowed for loop (do, while, for, foreach).</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.IsCaseSensitive">
            <summary>Gets or sets a value indicating whether if member are case sensitive (BindingFlags.IgnoreCase).</summary>
            <value>True if this object is case sensitive (BindingFlags.IgnoreCase), false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.CacheKeyPrefix">
            <summary>Gets or sets the cache key prefix used for the compiled code or expression cache.</summary>
            <value>The cache key prefix used for the compiled code or expression cache.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseCache">
            <summary>Gets or sets a value indicating whether the compiled code or expression cache should be used.</summary>
            <value>true if use cache, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseCaretForExponent">
            <summary>
                Gets or sets a value indicating whether the compiler should use caret for exponent expression instead of XOR
                expression.
            </summary>
            <value>true if the caret should be used for exponent, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.RetryAndThrowMissingTypes">
            <summary>
            Gets or sets a value indicating when an error happen, the compilation try again and throw all missing types (context.MissingTypes).
            </summary>
            <value>True if when an error happen, the compilation try again and throw all missing types (context.MissingTypes).</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseSmartTypeResolution">
            <summary>
            Gets or sets a value indicating whether that smart type resolution should be used.
            </summary>
            <value>True if smart type resolution should be used, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AutoAddMissingTypes">
            <summary>
            Gets or sets a value indicating whether missing type should be automatic added (slow down invalid expression).
            </summary>
            <value>True if missing type should be automatic added (slow down invalid expression).</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.SafeMode">
            <summary>Gets or sets a value indicating whether the safe mode is enabled.</summary>
            <value>true if safe mode is enabled, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DisableAutoReplaceDictionaryKey">
            <summary>
            Gets or sets a value indicating whether text with the same name as the dictionary key should be automatically replaced by the value
            </summary>
            <value>True if the text with the same name as the dictionary key should be automatically replaced by the value.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseTypeBeforeDynamic">
            <summary>Gets or sets a value indicating if that should be used before resolving dynamic member.</summary>
            <value>true if that should be used before resolving dynamic member.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DisableDynamicResolution">
            <summary>
            Gets or sets a value indicating whether the dynamic resolution is disabled.
            </summary>
            <value>True if disable dynamic resolution, false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.ForceObjectAsDynamic">
            <summary>
            Gets or sets a value indicating whether a type 'object' should always be considered as a type 'dynamic'.
            </summary>
            <value>True if a type 'object' should always be considered as a type 'dynamic'.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.AllowAddSubtractOperatorToCollection">
            <summary>
            Gets or sets a value indicating whether add subtract operator is allowed to collection such as `listInt + 3` which will add the value `3` to the current list.
            </summary>
            <value>True if add subtract operator is allowed to collection such as `listInt + 3` which will add the value `3` to the current list.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.ForceCharAsString">
            <summary>
            Gets or sets a value indicating whether a character should always be considered as a string.
            </summary>
            <value>True if a character should always be considered as a string.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.UseEqualsAssignmentAsEqualsOperator">
            <summary>
            Gets or sets a value indicating whether the assignment equals ('==') should be threat as an equals ('=')
            </summary>
            <value>True if the assignment equals ('==') should be threat as an equals ('='), false if not.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.MemoryCacheEntryOptionsFactory">
            <summary>Gets or sets the memory cache entry options factory.</summary>
            <value>A function delegate that yields the MemoryCacheEntryOptions.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DynamicGetMemberMissingValueFactory">
            <summary>Gets or sets the value factory when the `DynamicGetMember` method is called and no property or field is found.</summary>
            <value>The value factory when the `DynamicGetMember` method is called and no property or field is found.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.VariableFactory">
            <summary>Gets or sets an action to create a variable when none exists.</summary>
            <value>An action to create a variable when none exists.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DefaultNumberType">
            <summary>Gets or sets the default number type.</summary>
            <value>The default number type.</value>
        </member>
        <member name="P:Z.Expressions.EvalContext.DisableAutoRegisterEntityFramework">
            <summary>
            Gets or sets a value indicating whether the automatic register entity framework is
            disabled.
            </summary>
            <value>True if disable automatic register entity framework, false if not.</value>
        </member>
        <member name="M:Z.Expressions.EvalContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="T:Z.Expressions.DefaultNumberType">
            <summary>Values that represent default number types (Int by default).</summary>
        </member>
        <member name="M:Z.Expressions.EvalLinq.Execute(System.String,System.Boolean,System.Linq.Expressions.Expression,System.Object[])">
            <summary>Executes.</summary>
            <param name="code">The code.</param>
            <param name="isQueryable">True if is queryable, false if not.</param>
            <param name="exp">(Optional) The exponent.</param>
            <param name="parameters">A variable-length parameters list containing parameters.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Z.Expressions.EvalManager.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="P:Z.Expressions.EvalManager.Cache">
            <summary>Gets or sets the cache used to cache compiled code and expressions.</summary>
            <value>The cache used to cache compiled code and expressions.</value>
        </member>
        <member name="P:Z.Expressions.EvalManager.DefaultContext">
            <summary>Gets or sets the default context used for static member from Eval class and Extension Methods.</summary>
            <value>The default context used for static member from Eval class and Extension Methods.</value>
        </member>
        <member name="M:Z.Expressions.EvalManager.AddLicense(System.String,System.String)">
            <summary>Add the PRO license purchased from ZZZ Projects Inc. (http://eval-expression.net/).</summary>
            <param name="licenseName">The license name.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="M:Z.Expressions.EvalManager.IsTrialMode">
            <summary>Check if the trial mode is enabled.</summary>
            <returns>True if the trial mode is enabled.</returns>
        </member>
        <member name="M:Z.Expressions.EvalManager.IsTrialExpired">
            <summary>Check if the trial period is expired or not (Doesn't mean the trial period is enabled).</summary>
            <returns>True if the trial period is expired or not (Doesn't mean the trial period is enabled).</returns>
        </member>
        <member name="M:Z.Expressions.EvalManager.IsLicenseAdded">
            <summary>Check if at least one license as been added (Doesn't mean the license is valid).</summary>
            <returns>True if at least one license as been added (Doesn't mean the license is valid).</returns>
        </member>
        <member name="M:Z.Expressions.EvalManager.ValidateLicense">
            <summary>Validates the license.</summary>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Z.Expressions.EvalManager.ValidateLicense(System.String@)">
            <summary>Validates the license.</summary>
            <param name="errorMessage">[out] Message describing the error.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:Z.Expressions.EvalManager.IsCommunity">
            <summary>Gets or sets a value indicating whether the library is in community mode (automatically throw an error for all paid features).</summary>
            <value>True if the library is in community mode (automatically throw an error for all paid features).</value>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type[])">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <param name="type9">The ninth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile``1(System.String)">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile``1(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Compile the code or expression and return a TDelegate of type Func or action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Compile``1(System.String,System.String[])">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute(System.String)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute``1(System.String)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute``1(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Execute``1(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Eval.Tokenize(System.String)">
            <summary>Tokenize the code</summary>
            <param name="code">The code to tokenize.</param>
            <returns>A List&lt;TokenInfo&gt;</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type[])">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterTypes">Parameter types used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>Compile the code or expression and return a delegate of type Func to execute.</summary>
            <param name="code">The code or expression to compile.</param>
            <param name="type1">The first type used to compile the code or expression.</param>
            <param name="type2">The second type used to compile the code or expression.</param>
            <param name="type3">The third type used to compile the code or expression.</param>
            <param name="type4">The fourth type used to compile the code or expression.</param>
            <param name="type5">The fifth type used to compile the code or expression.</param>
            <param name="type6">The sixth type used to compile the code or expression.</param>
            <param name="type7">The seventh type used to compile the code or expression.</param>
            <param name="type8">The eighth type used to compile the code or expression.</param>
            <param name="type9">The ninth type used to compile the code or expression.</param>
            <returns>A delegate of type Func that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile``1(System.String)">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile``1(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Compile the code or expression and return a TDelegate of type Func or action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Compile``1(System.String,System.String[])">
            <summary>Compile the code or expression and return a TDelegate of type Func or Action to execute.</summary>
            <typeparam name="TDelegate">Type of the delegate (Func or Action) to use to compile the code or expression.</typeparam>
            <param name="code">The code or expression to compile.</param>
            <param name="parameterNames">Parameter names used to compile the code or expressions.</param>
            <returns>A TDelegate of type Func or Action that represents the compiled code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute(System.String)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result.</summary>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute``1(System.String)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute``1(System.String,System.Object)">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
        <member name="M:Z.Expressions.Extensions.Execute``1(System.String,System.Object[])">
            <summary>Compile and evaluate the code or expression and return the result of type TResult.</summary>
            <typeparam name="TResult">Type of the result of the evaluted code or expression.</typeparam>
            <param name="code">The code or expression to evaluate.</param>
            <param name="parameters">The parameter values used to evaluates the code or expression.</param>
            <returns>The evaluated result of type TResult or null that represents the evaluted code or expression.</returns>
        </member>
    </members>
</doc>